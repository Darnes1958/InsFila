<?php

namespace App\Filament\Pages;

use App\Livewire\Traits\Raseed;
use App\Models\Bank;
use App\Models\Customer;
use App\Models\Item;
use App\Models\Main;
use App\Models\Main_arc;
use App\Models\Place_stock;
use App\Models\Price_sell;
use App\Models\Sell;
use App\Models\Sell_tran;
use Awcodes\TableRepeater\Components\TableRepeater;
use Awcodes\TableRepeater\Header;
use Filament\Forms\Components\Actions\Action;
use Filament\Forms\Components\Component;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Forms\Set;
use Filament\Notifications\Notification;
use Filament\Pages\Page;
use Filament\Support\Enums\VerticalAlignment;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Livewire\Attributes\On;
use Closure;

class newCont extends Page implements HasForms
{
    use InteractsWithForms;
    use Raseed;
    protected static ?string $navigationIcon = 'heroicon-o-document-text';

    protected static string $view = 'filament.pages.new-cont';
    protected ?string $heading='';
    public static function shouldRegisterNavigation(): bool
    {
        return false; // TODO: Change the autogenerated stub
    }

    public $contData;
    public $sellData;
    public $showSell=false;

    public  $sell_id;
    public $Sell;
    #[On('fillSell')]
    public function fillSell($sell)
    {

        $this->Sell=Sell::find($sell['id']);
        $this->contForm->fill(['sul_begin'=>now(),'id'=>Main::max('id')+1,'sell_id'=>$this->Sell->id,
                'acc'=>'222','baky'=>$this->Sell->baky]

        );
    }
    public function mount($sell=null): void
    {

            $this->contForm->fill(['sul_begin'=>now(),'id'=>Main::max('id')+1]);
            $this->sellForm->fill(['order_date'=>now()]);


        $this->showSell=false;
    }
    protected function getForms(): array
    {
        return array_merge(parent::getForms(),[
            'contForm'=> $this->makeForm()
                ->model(Main::class)
                ->schema($this->getContFormSchema())
                ->statePath('contData'),
            'sellForm'=> $this->makeForm()
                ->model(Sell::class)
                ->schema($this->getSellFormSchema())
                ->statePath('sellData'),
        ]);
    }
    public function go($who){
        $this->dispatch('gotoitem', test: $who);
    }
    public function store(){
        $this->validate();
        Main::create(collect($this->contData)->except(['total','pay','baky'])->toArray());
        Notification::make()
            ->title('تم تحزين البيانات بنجاح')
            ->success()
            ->send();
        $this->mount();
    }
    protected function getSellFormSchema(): array
    {
        return [
        Section::make()
        ->schema([
          Section::make()
            ->schema([

                DatePicker::make('order_date')
                    ->extraAttributes([
                        'wire:keydown.enter' => "\$dispatch('gotoitem', { test: 'customer_id' })",
                    ])
                    ->default(function (){
                        return now();
                    })
                    ->id('order_date')
                    ->autofocus()
                    ->live()
                    ->hiddenLabel()
                    ->prefix('التاريخ')
                    ->columnSpan(2)
                    ->required(),
                Select::make('customer_id')
                    ->prefix('الزبون')
                    ->hiddenLabel()
                    ->relationship('Customer', 'name')
                    ->searchable()
                    ->preload()
                    ->live()
                    ->required()
                    ->columnSpan(2)
                    ->extraAttributes([
                        'wire:change' => "\$dispatch('gotoitem', { test: 'place_id' })",
                        'wire:keydown.enter' => "\$dispatch('gotoitem', { test: 'place_id' })",
                    ])
                    ->id('customer_id'),
                Select::make('place_id')
                    ->prefix('نقطة البيع')
                    ->hiddenLabel()
                    ->relationship('Place','name')
                    ->live()
                    ->required()
                    ->columnSpan(2)
                    ->extraAttributes([
                        'wire:change' => "\$dispatch('gotoitem', { test: 'price_type_id' })",
                        'wire:keydown..enter' => "\$dispatch('goto', { test: 'price_type_id' })",
                    ])
                    ->id('place_id'),

                TextInput::make('tot')
                    ->prefix('إجمالي الفاتورة')
                    ->hiddenLabel()
                    ->columnSpan(2)
                    ->readOnly(),
                Hidden::make('price_type_id'),
                Hidden::make('total'),
                Hidden::make('single'),
                Hidden::make('baky'),
                Hidden::make('user_id'),


            ])
            ->columns(4)
            ->columnSpan('full'),
        Section::make()
            ->schema([
                TableRepeater::make('Sell_tran')
                    ->hiddenLabel()
                    ->required()
                    ->addActionLabel('اضافة صنف')
                    ->relationship()
                    ->headers([
                        Header::make('رقم الصنف')
                            ->width('46%'),
                        Header::make('الكمية')
                            ->width('12%'),
                        Header::make('السعر')
                            ->width('15%'),
                        Header::make('الرصيد')
                            ->width('12%'),
                        Header::make('الاجمالي')
                            ->width('15%'),

                    ])
                    ->schema([
                        Select::make('item_id')
                            ->required()
                            ->preload()
                            ->searchable()

                          ->relationship('Item','name',
                              modifyQueryUsing: fn ($query,Get $get) =>
                              $query->whereIn('id',
                                  Place_stock::where('place_id', $get('../../place_id'))
                                      ->where('stock1','>',0)
                                      ->pluck('item_id'))
                          )
                            //->options(Item::all()->pluck('name','id'))
                            ->disableOptionWhen(function ($value, $state, Get $get) {
                                return collect($get('../*.item_id'))
                                    ->reject(fn($id) => $id == $state)
                                    ->filter()
                                    ->contains($value);
                            })
                            ->afterStateUpdated(function ($state,Set $set,Get $get){
                                $set('price1',Price_sell::where('item_id',$state)
                                    ->where('price_type_id',3)->first()->price1);
                                $set('stock1',Place_stock::where('place_id',$get('../../place_id'))
                                    ->where('item_id',$state)->first()->stock1);
                                $set('q1',null);
                                $set('sub_tot',null);
                                $set('barcode_id',Item::find($state)->barcode);

                            })
                        ,

                        TextInput::make('q1')
                            ->numeric()
                            ->live(onBlur: true)
                            ->extraInputAttributes(['tabindex' => 1])
                            ->afterStateUpdated(function ($state,Set $set,Get $get,$old,$operation){
                                if ($state > $get('stock1')) {
                                    $set('q1',null);
                                    Notification::make()
                                        ->title('الرصيد لا يسمح')
                                        ->color('danger')
                                        ->send();
                                    return;
                                }
                                if ($get('price1') && $get('q1')) $set('sub_tot',$get('price1')*$get('q1'));
                            })
                            ->required(),
                        TextInput::make('price1')
                            ->numeric()
                            ->afterStateUpdated(function (Set $set,Get $get){
                                if ($get('price1') && $get('q1')) $set('sub_tot',$get('price1')*$get('q1'));
                            })
                            ->required() ,
                        TextInput::make('stock1')
                            ->dehydrated(false),
                        TextInput::make('sub_tot')
                            ->readOnly(),
                        Hidden::make('sell_id'),
                        Hidden::make('barcode_id'),
                        Hidden::make('user_id')->default(Auth::id()),

                    ])
                    ->defaultItems(0)
                    ->addable(function ($state,Get $get){
                        $flag=true;
                        if (!$get('place_id')) return false;
                        if ($state)
                            foreach ($state as $item) {
                                if (!$item['item_id'] || !$item['q1'] || !$item['price1']
                                || $item['q1']==0 || $item['price1']==0) {$flag=false; break;}
                            }
                        return $flag;
                    })
                    ->afterStateUpdated(function ($state,Set $set,Get $get){
                        $total=0;
                        foreach ($state as $item){
                            if ($item['q1'] && $item['price1']) {
                                $total +=round($item['q1'] * $item['price1'],3);
                            }
                        }
                        $set('tot',$total);
                        $set('total',$total);
                        $set('baky',$total);

                    })
                    ->live()
                    ->columnSpan('full'),
                \Filament\Forms\Components\Actions::make([
                    Action::make('store')
                        ->label('تخزين')
                        ->color('success')
                        ->action(function (Set $set){
                            $this->sellForm->validate();

                            $set('price_type_id',3);
                            $set('single',1);
                            $set('user_id',Auth::id());
                            $sell=Sell::create( collect($this->sellData)->except(['Sell_tran'])->toArray());
                            foreach ($this->sellData['Sell_tran'] as $item){

                                $item['sell_id']=$sell->id;
                                $tran_id=Sell_tran::create(collect($item)->except(['stock1'])->toArray());
                                $this->decAll($tran_id->id,$sell->id,$item['item_id'],$sell->place_id,$item['q1'],0);
                                $this->setPriceSell($item['item_id'],$sell->price_type_id,$sell->single,$item['price1'],0);
                            }
                            $set('Sell_tran',null);
                            $set('place_id',null);
                            $set('tot',null);
                            $set('customer_id',null);
                            $this->Sell=Sell::find($sell->id);
                            $this->contForm->fill(['sul_begin'=>now(),'id'=>Main::max('id')+1,'sell_id'=>$this->Sell->id,
                                    'acc'=>'222','baky'=>$this->Sell->baky]

                            );
                            //$this->dispatch('fillSell',$sell);
                            $this->showSell=false;
                        }),
                    Action::make('cancel')
                        ->label('تجاهل')
                        ->color('info')
                        ->action(function (Set $set){
                            $set('Sell_tran',null);
                            $set('place_id',null);
                            $set('tot',null);
                            $set('customer_id',null);
                            $this->showSell=false;
                        }),

                ])->columnSpan('full')
            ])
            ->columnSpan('full'),
    ])->columns(8)
        ->hidden(fn(): bool => !$this->showSell)
            ];

    }
    protected function getContFormSchema(): array
    {
        return [
            Section::make()
                ->schema([
                    Select::make('sell_id')
                        ->label('فاتورة المبيعات')
                        ->relationship('Sell','name',modifyQueryUsing: fn (Builder $query) =>
                        $query->WhereDoesntHave('Main')->where('price_type_id','=',3),)
                        ->getOptionLabelFromRecordUsing(fn (Model $record) => "{$record->id} {$record->Customer->name} {$record->total}")
                        ->searchable()
                        ->preload()
                        ->live()

                        ->required()
                        ->columnSpan(3)

                        ,
                    Hidden::make('customer_id'),
                    \Filament\Forms\Components\Actions::make([
                    Action::make('newnew')
                     ->action(function (){
                       $this->showSell=true;
                         //  $this->dispatch('open-modal', id: 'create-sell');
                     })
                     ->label('فاتورة جديدة'),
                    ])->verticalAlignment(VerticalAlignment::End),
                    TextInput::make('baky')
                        ->afterStateHydrated(function (TextInput $component){
                          if ($this->Sell)  $component->state($this->Sell->baky);
                        })
                        ->label('الاجمالي')
                        ->columnSpan(2)
                        ->disabled(),
                    TextInput::make('id')
                        ->label('رقم العقد')
                        ->columnSpan(2)
                        ->required()
                        ->unique(ignoreRecord: true)
                        ->unique(table: Main_arc::class)
                        ->default(Main::max('id')+1)
                        ->numeric()
                        ->extraAttributes([
                            'wire:keydown.enter'=>'$dispatch("gotoitem", {test: "acc"})',

                        ])
                        ->id('main_id'),


                ])
                ->columns(4),
            Section::make()
                ->schema([

                    Select::make('bank_id')
                        ->label('المصرف')
                        ->columnSpan(4)
                        ->relationship('Bank','BankName')
                        ->searchable()
                        ->preload()
                        ->createOptionForm([
                            Section::make('ادخال مصارف')
                                ->description('ادخال بيانات مصرف .. ويمكن ادخال المصرف التجميعي اذا كان غير موجود بالقائمة')
                                ->schema([
                                    TextInput::make('BankName')
                                        ->required()
                                        ->label('اسم المصرف')
                                        ->maxLength(255),
                                    Select::make('taj_id')
                                        ->relationship('Taj','TajName')
                                        ->label('المصرف التجميعي')
                                        ->searchable()
                                        ->preload()
                                        ->createOptionForm([
                                            TextInput::make('TajName')
                                                ->required()
                                                ->label('المصرف التجميعي')
                                                ->maxLength(255),
                                            TextInput::make('TajAcc')
                                                ->label('رقم الحساب')
                                                ->required(),
                                        ])
                                        ->required(),
                                ])
                        ])
                        ->editOptionForm([
                            Section::make('ادخال مصارف')
                                ->description('ادخال بيانات مصرف .. ويمكن ادخال المصرف التجميعي اذا كان غير موجود بالقائمة')
                                ->schema([
                                    TextInput::make('BankName')
                                        ->required()
                                        ->label('اسم المصرف')
                                        ->maxLength(255),
                                    Select::make('taj_id')
                                        ->relationship('Taj','TajName')
                                        ->label('المصرف التجميعي')
                                        ->searchable()
                                        ->preload()
                                        ->createOptionForm([
                                            TextInput::make('TajName')
                                                ->required()

                                                ->label('المصرف التجميعي')
                                                ->maxLength(255),
                                            TextInput::make('TajAcc')
                                                ->label('رقم الحساب')
                                                ->required(),
                                        ])
                                        ->required(),
                                ])
                        ])
                        ->createOptionAction(fn ($action) => $action->color('success'))
                        ->editOptionAction(fn ($action) => $action->color('info'))
                        ->afterStateUpdated(function ($state,Set $set){
                            $set('taj_id',Bank::find($state)->taj_id);
                            $this->go('acc');

                        })
                        ->id('bank_id')
                        ->required(),

                    Hidden::make('taj_id'),

                    TextInput::make('acc')
                        ->columnSpan(4)
                        ->label('رقم الحساب')
                        ->required()



                        ->id('acc')
                        ->extraAttributes(['wire:keydown.enter'=>'$dispatch("gotoitem", {test: "sul_begin"})',]),
                    DatePicker::make('sul_begin')
                        ->required()
                        ->label('تاريخ العقد')
                        ->columnSpan(2)
                        ->maxDate(now())
                        ->extraAttributes(['wire:keydown.enter'=>'$dispatch("gotoitem", {test: "kst_count"})',])
                        ->id('sul_begin'),
                    TextInput::make('sul')
                        ->label('قيمة العقد')
                        ->columnSpan(2)
                        ->readOnly()
                        ->live(onBlur: true)
                        ->readOnly()                     ,
                    TextInput::make('kst_count')
                        ->label('عدد الأقساط')
                        ->columnSpan(2)
                        ->live(onBlur: true)
                        ->afterStateUpdated(function (Get $get,Set $set) {
                            $val=$get('sul') / $get('kst_count');
                            $set('kst', $val);
                        })
                        ->required()
                        ->extraAttributes(['wire:keydown.enter'=>'$dispatch("gotoitem", {test: "kst"})',])
                        ->id('kst_count'),
                    TextInput::make('kst')
                        ->columnSpan(2)
                        ->label('القسط')
                        ->id('kst')
                        ->extraAttributes(['wire:keydown.enter'=>'$dispatch("gotoitem", {test: "notes"})',])
                        ->required(),
                    TextInput::make('notes')
                        ->label('ملاحظات')
                        ->columnSpan('full')
                        ->extraAttributes(['x-on:keyup.enter'=>"\$wire.store",])
                        ->id('notes')
                        ->columnSpanFull(),
                    \Filament\Forms\Components\Actions::make([
                        Action::make('store')
                            ->label('تخزين')
                            ->color('success')
                            ->action(function (){
                                $this->store();
                            }),
                        Action::make('cancel')
                            ->label('تجاهل')
                            ->color('info')
                            ->action(function (){
                                $this->mount();
                            }),

                    ])->columnSpan('full')

                ])
                ->columns(4),

        ];
    }
}
